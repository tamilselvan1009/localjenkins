<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.30">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>LINUX_VECTORCAST_DIR</name>
          <description>Vectorcast directory</description>
          <defaultValue>/mnt/nfs/shared/typeinfodb/builds/oct10/release</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>summary_file</name>
          <description></description>
          <defaultValue>summary.txt</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>top_level_archive_dir</name>
          <description></description>
          <defaultValue>/mnt/nfs/shared/firefox_results/linux</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description></description>
          <defaultValue>user_trigger</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>Firefox_linux</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>15 2 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe


echo $LINUX_VECTORCAST_DIR
export BOOST_DIR=&quot;/mnt/nfs/TOOLS/boost-1.53.0&quot;
export VECTOR_LICENSE_FILE=27000@192.168.163.60
export VECTORCAST_DIR=${LINUX_VECTORCAST_DIR}
export PYTHONPATH=/usr/lib/python2.7/dist-packages:$PYTHONPATH

ulimit -c unlimited

#function to handle error 
handle_error()
{
	export _error_=$?
	if [ ! &quot;$_error_&quot; == &quot;0&quot; ];then
		echo &quot;      Command failed &quot;
		export _RETURN_CODE_=$_error_
	fi
}
Extract()
{

output=`grep &quot;real&quot; $1 | awk &apos;{printf(&quot;%s&quot;,$2)}&apos;`
grep &quot;real&quot; $1 | awk &apos;{printf(&quot;         %s         &quot;,$2)}&apos;&gt;&gt;$summary_file
echo -n -e  $2 &gt;&gt;$summary_file
echo -n -e &quot;-&quot; &gt;&gt;$summary_file
echo -n -e $3  &gt;&gt;$summary_file
echo -n -e  &quot;   &quot;&gt;&gt;$summary_file
if [ ! -z &quot;$4&quot; ] &amp;&amp; [ ! -z &quot;$5&quot; ]
then
_var_=`grep &quot;$5&quot; $4 | grep -o &apos;[0-9]\+&apos;`
if [ &quot;$5&quot; == &quot;${artifact[1]}&quot; ]
then 
if [ &quot;$_var_&quot; -ge &quot;$_threshold&quot; ]
then
_result=${_expected[0]}
else
_result=${_expected[1]}
fi
fi
fi
echo -n -e &quot; $_var_ &quot; &gt;&gt;$summary_file
echo -n -e &quot; $_var_ &quot; &gt;&gt;$summary_file
_var_=&quot;--&quot;
out=`echo $output | awk &apos;{split ($0,a,&quot;m&quot;);print a[1]}&apos;`
if  [ $out -ge $2 ] &amp;&amp; [ $out -le $3 ] 
then 
echo -n  -e &quot; Passed &quot;&gt;&gt;$summary_file
else
echo  -n -e &quot; Failed &quot;&gt;&gt;$summary_file
fi
echo $_result &gt;&gt;$summary_file 

}

#function for lua performance  
LUA_PERFORMANCE_FUNC()
{
   export VCTOOLS_PACKAGE=&quot;/mnt/nfs/shared/81269_daily/daily_typeinfo_build/typeinfo.unx32.tar.gz&quot;
   if [ -f  $VCTOOLS_PACKAGE ];then
    echo $VCTOOLS_PACKAGE
	tar -zxvf $VCTOOLS_PACKAGE
    export VECTORCAST_DIR=$PWD/vcast
    echo &quot;in lua_performance_func&quot;
    echo $VECTORCAST_DIR
    cp  -r /home/vectorindia/Harvester/Harvester/tests/apps/lua-5.3.2 $WORKSPACE/.
    
    #set clicast 
    $VECTORCAST_DIR/clicast -lc template GNU_C_44
    
    #RECORD VCSHELL TIMMINGS
    echo -n -e &quot;VchellMake-j4 \t&quot;&gt;&gt;$summary_file
    vcshelltime=0
    time ($VECTORCAST_DIR/vcshell --db=pristine_vcshell.db make -C lua-5.3.2 generic  &gt;vcshell_make.out.txt 2&gt;&amp;1) 2&gt;&gt; vcshell_make.out || handle_error
    Extract vcshell_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error
    
    cp  pristine_vcshell.db vcshell.db
    
    #RECORD ADDTYPEINFO lparser.c DATA
    echo -n -e &quot;AddInfolparser.c \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --file=lparser.c addtypeinfo  &gt;vcutil_lparser.txt 2&gt;&amp;1) 2&gt;&gt; vcaddtypeinfo_make.out || handle_error
    vcshelltime=1
    Extract vcaddtypeinfo_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD GETVARINFO lparser.c DATA
    echo -n -e &quot;GetInfolparser.c \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcdb --file=lparser.c getvarinfo  &gt;vcutil_getvarinfo_lparser.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_getvarinfo_lparser_make.out || handle_error
    vcshelltime=0
    Extract vcutil_getvarinfo_lparser_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error

    $VECTORCAST_DIR/vcdb getfiles &gt; flist
    
    #RECORD ADDTYPEINFO lparser.c DATA
    echo -n -e &quot;AddInfofilelist \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --filelist=flist addtypeinfo  &gt;vcutil_full.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_full.out || handle_error
    vcshelltime=1
    Extract vcutil_full.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD ADDTYPEINFO lparser.c DATA
    echo -n -e &quot;AddInfoAll \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --all addtypeinfo  &gt;vcutil_all.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_all.out || handle_error
    vcshelltime=1
    Extract vcutil_all.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD GETVARINFO lparser.c DATA
    echo -n -e &quot;GetInfolparser.c \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcdb --file=lparser.c getvarinfo  &gt;vcutil_getvarinfo_lparser1.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_getvarinfo_lparser_make1.out || handle_error
    vcshelltime=0
    Extract vcutil_getvarinfo_lparser_make1.out $vcshelltime `expr $vcshelltime + 6` || handle_error
    
    PYTHON_PERFORMANCE_FUNC
    
    
    

   fi

}

PYTHON_PERFORMANCE_FUNC()
{

   cp  /home/vectorindia/Harvester/Harvester/tests/apps/Python-3.5.0.tar.gz $WORKSPACE/.
   tar xzfv Python-3.5.0.tar.gz
   cd Python-3.5.0/
   ./configure  
   #RECORD VCSHELL TIMMINGS
    echo -n -e &quot;VchellPythonMake \t&quot;&gt;&gt;$summary_file
    vcshelltime=0
    time ($VECTORCAST_DIR/vcshell --db=pristine_python_vcshell.db make  &gt;vcshell_python_make.out.txt 2&gt;&amp;1) 2&gt;&gt; vcshell_python_make.out || handle_error
    Extract vcshell_python_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error
    
    cp  pristine_python_vcshell.db vcshell1.db
    cp ../CCAST_.CFG .
    
    #RECORD ADDTYPEINFO unicodeobject.c DATA
    echo -n -e &quot;Addunicodeobject \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --db=vcshell1.db --file=unicodeobject.c addtypeinfo  &gt;vcutil_lparser_py.txt 2&gt;&amp;1) 2&gt;&gt; vcaddtypeinfo_make_py.out || handle_error
    vcshelltime=1
    Extract vcaddtypeinfo_make_py.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD GETVARINFO unicodeobject.c DATA
    echo -n -e &quot;Getunicodeobject \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcdb --db=vcshell1.db --file=unicodeobject.c getvarinfo  &gt;vcutil_getvarinfo_lparser_py.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_getvarinfo_lparser_make_py.out || handle_error
    vcshelltime=0
    Extract vcutil_getvarinfo_lparser_make_py.out $vcshelltime `expr $vcshelltime + 6` || handle_error

    
    #RECORD --incremental DATA
    echo -n -e &quot;AddInfofilelist \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --db=vcshell1.db --incremental addtypeinfo  &gt;vcutil_full_py.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_full_py.out || handle_error
    vcshelltime=1
    Extract vcutil_full_py.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD ADDTYPEINFOall DATA
    echo -n -e &quot;AddInfoAll \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcutil --db=vcshell1.db --all addtypeinfo  &gt;vcutil_all_py.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_all_py.out || handle_error
    vcshelltime=1
    Extract vcutil_all_py.out $vcshelltime `expr $vcshelltime + 6` || handle_error
   
    #RECORD GETVARINFO lparser.c DATA
    echo -n -e &quot;GetInfolparser.c \t&quot;&gt;&gt;$summary_file
    time ($VECTORCAST_DIR/vcdb --db=vcshell1.db --file=unicodeobject.c getvarinfo  &gt;vcutil_getvarinfo_lparser1_py.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_getvarinfo_lparser_make1_py.out || handle_error
    vcshelltime=0
    Extract vcutil_getvarinfo_lparser_make1_py.out $vcshelltime `expr $vcshelltime + 6` || handle_error
    








}


: &apos;
########################################
#COMMENTS TO BE REMOVED
#Print tools version in console for reference
#$VECTORCAST_DIR/vcshell --version
#$VECTORCAST_DIR/clicast --version

#Copy the firefox source 
#cp -r /home/vectorindia/firefox_regression/* $WORKSPACE/.
#cp  -r /home/vectorindia/Harvester/Harvester/tests/apps/lua-5.3.2 $WORKSPACE/.

#. ./make_config


#print date 
#echo $(date) &gt;&gt;$summary_file &gt;&gt;sol.txt

#print VcTools version in log file
#echo &quot;---- Results for VcTools Version : ` $VECTORCAST_DIR/vcshell --version | grep Version | awk &apos;{print $3}&apos;` &quot; &gt;&gt; $summary_file
echo &quot;---- Results for VcTools Version : ` $VECTORCAST_DIR/vcshell --version | grep Version | awk &apos;{print $3}&apos;` &quot; &gt;&gt; sol.txt
#echo  &gt;&gt; $summary_file

#tabular format for the file
echo -e  &quot;Command               Time      ExpectedTime  Artifact ExpectedArtifact   TimmingResult   ArtiResult  &quot; &gt;&gt;$summary_file
echo -e  &quot;Command               Time      ExpectedTime  Artifact ExpectedArtifact   TimmingResult   ArtiResult  &quot; &gt;&gt;sol.txt

&apos;
#######################################
#MULTICOMMENTS to be removed


#LUA performance function 
LUA_PERFORMANCE_FUNC

#########################################
#MULTILINE COMMENT STARTED
#TODO NAME:KAVYA  OBJECTIVE:PUT THE WHOLE STUFF IN A FUNCTION  SO THAT IT IS MODULAR 
: &apos;
#Execute and measure timings for vcshell make -j8
echo -n -e &quot;VchellMake-j4 \t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcshell --db=pristine_vcshell.db make -j4 &gt;vcshell_make.out.txt 2&gt;&amp;1) 2&gt;&gt; vcshell_make.out || handle_error
Extract vcshell_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error

cp pristine_vcshell.db vcshell.db

$VECTORCAST_DIR/vcdb getfiles &gt; files

cd $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu

#taking 1000 files
head -1000 files &gt; first1k.txt || handle_error
echo -n -e &quot;typeinfo_first1k\t&quot;&gt;&gt;$summary_file || handle_error
time ($VECTORCAST_DIR/vcutil --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=first1k.txt --jobs=4 addtypeinfo &gt; typeinfo1.out 2&gt;&amp;1) 2&gt;&gt; typeinfo1 || handle_error

exit

#next 1000 files
sed -n -e &apos;1001,2000p&apos; files &gt; second1k.txt || handle_error
echo -n -e &quot;typeinfo_second1k\t&quot;&gt;&gt;$summary_file || handle_error
time ($VECTORCAST_DIR/vcutil --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=second1k.txt --jobs=4 addtypeinfo &gt; typeinfo2.out 2&gt;&amp;1) 2&gt;&gt; typeinfo2 || handle_error

#next 1000 files
sed -n -e &apos;2001,3000p&apos; files &gt; third1k.txt || handle_error
echo -n -e &quot;typeinfo_third1k\t&quot;&gt;&gt;$summary_file || handle_error
time ($VECTORCAST_DIR/vcutil --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=third1k.txt --jobs=4 addtypeinfo &gt; typeinfo3.out 2&gt;&amp;1) 2&gt;&gt; typeinfo3 || handle_error

#next 1000 files
sed -n -e &apos;3001,4000p&apos; files &gt; fourth1k.txt || handle_error
echo -n -e &quot;typeinfo_fourth1k\t&quot;&gt;&gt;$summary_file || handle_error
time ($VECTORCAST_DIR/vcutil --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=fourth1k.txt --jobs=4 addtypeinfo &gt; typeinfo4.out 2&gt;&amp;1) 2&gt;&gt; typeinfo4 || handle_error

#next 1000 files
sed -n -e &apos;4001,5085p&apos; files &gt; fifth1k.txt || handle_error
echo -n -e &quot;typeinfo_fifth\t&quot;&gt;&gt;$summary_file || handle_error
time ($VECTORCAST_DIR/vcutil --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=fifth1k.txt --jobs=4 addtypeinfo &gt; typeinfo5.out 2&gt;&amp;1) 2&gt;&gt; typeinfo5 || handle_error

(column -t $summary_file) &gt; temp.txt || handle_error
rm -rf $summary_file || handle_error
cp temp.txt $summary_file || handle_error

&apos;
#########################################
#MULTILINE COMMENT ENDED

exit /b $_RETURN_CODE_</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>kavya.seshu@vector.com</recipientList>
      <contentType>text/plain</contentType>
      <defaultSubject>Firefox Linux Result</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>kavya.seshu@vector.com</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.9"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>${ENV,var=&quot;BUILD_NAME&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>false</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>