<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Single job to run the manage project: N:/shared/Harvester_Coverage/Windows/Harvester/VcTools_Windows.vcm</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VECTORCAST_DIR</name>
          <description></description>
          <defaultValue>N:\shared\.VCAST_REGRESSION\VCAST_COVERAGE\VCAST_WINDOWS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HARVESTER_DIR</name>
          <description></description>
          <defaultValue>N:\shared\Harvester_Coverage\Windows\Harvester</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description></description>
          <defaultValue>VectorCAST coverage for Harvester</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MANAGE_PROJECT</name>
          <description></description>
          <defaultValue>N:\shared\Harvester_Coverage\Windows\Harvester\VcTools_Windows.vcm</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VECTOR_LICENSE_FILE</name>
          <description></description>
          <defaultValue>C:\FLEXlm\vector-INDIAWINDOWSBUI.lic</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VC_RESULT_DIR</name>
          <description></description>
          <defaultValue>N:\shared\Harvester_Coverage\Windows\Harvester\result</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>Windows_54</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTSetup plugin="vectorcast-execution@0.18"/>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand plugin="vectorcast-execution@0.18">
      <winCommand>call &quot;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcvarsall.bat&quot;

set VCAST_RPTS_PRETTY_PRINT_HTML=FALSE
cd %HARVESTER_DIR%
n:

%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --status
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --release-locks
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --disable-instrument-in-place

set BPATH=%PATH%
set PATH=C:\cygwin_2_8_0_dont_delete_reg_uses_this_for_git\bin;%PATH
git checkout -- harvester/inc/vcVersion.h
git stash
git pull origin develop
set PATH=%BPATH%

:: Change the VcTools version to the git commit id
FOR /F &quot;delims=&quot; %%i IN (&apos;git rev-parse --short HEAD&apos;) DO set version=%%i
call powershell -Command &quot;(gc ./harvester/inc/vcVersion.h) -replace &apos;.*#define _VCTOOLS_VERSION_.*&apos;, &apos;#define _VCTOOLS_VERSION_ %version%&apos;  | Out-File har
vester\inc\vcVersion.h&quot;

del vcshell.*
%VECTORCAST_DIR%\vcshell buildWin.bat msvc9 --arch-=win32 --config=Release

%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; ---enable-instrument-in-place
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --build

cd build
call install.bat

call &quot;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\varsall.bat&quot;
cd %WORKSPACE%
c:
mkdir harvester
xcopy /s %HARVESTER_DIR%\harvester .
cd ..
if EXIST tbuild rmdir /q /s tbuild
mkdir tbuild

cd tbuild
cmake -G&quot;Visual Studio 10&quot; ..\tests
%VECTORCAST_DIR%\vpython VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\VCRUNTESTS.DAT

mkdir longcmd
cmake -G&quot;Visual Studio 10&quot; ..\tests\LongCmd
%VECTORCAST_DIR%\vpython VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\LONGCMD.DAT &apos;;&apos;
cd ..

cd MathTest\Matrix
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
%VECTORCAST_DIR%\vpython VcRunTests.py --cmd-verb
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\CMDVERB.DAT &apos;;&apos;

C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
set _VC_OLD_VCAPP_DB_IF_=1
%VECTORCAST_DIR%\vpython VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\OLD_VCAPP.DAT &apos;;&apos;

C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
set _VC_SEQ_DISPATCHER_=1
%VECTORCAST_DIR%\vpython VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\SEQ_DISPATCHER.DAT &apos;;&apos;

if EXIST %HARVESTER_DIR%\\release-packages rmdir /q /s %HARVESTER_DIR%\\release-packages
cd %HARVESTER_DIR%\\build
call release-package.bat

cd ..\release-packages\release\examples
call buildall.bat
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\EXAMPLES.DAT &apos;;&apos;

cd %HARVESTER_DIR%
if EXIST tbuid_cygwin rmdir /q /s tcygwin
mkdir tcygwin
cd tcygwin
set BPATH=%PATH%
set PATH=C:\cygwin\bin;%PATH%
bash -c &quot;cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ../tests&quot;
cd HelloTest
python VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\CYGWIN.DAT &apos;;&apos;
set PATH=%BPATH%

cd %HARVESTER_DIR%\cover
set results=VCRUNTESTS LONGCMD CMDVERB OLD_VCAPP SEQ_DISPATCHER EXAMPLES CYGWIN
for result in (%results%) do (
%VECTORCAST_DIR%\clicast -lc -e harvester_win32 cover result remove %result%
%VECTORCAST_DIR%\clicast -lc -e harvester_win32 cover result add %result%
)

%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\generate-results.py&quot; --api 2 &quot;%MANAGE_PROJECT%&quot; 
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --full-status=&quot;VcTools_Windows_full_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=aggregate   --output=&quot;VcTools_Windows_aggregate_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=metrics     --output=&quot;VcTools_Windows_metrics_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=environment --output=&quot;VcTools_Windows_environment_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --full-status &gt; &quot;VcTools_Windows_full_report.txt&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\gen-combined-cov.py&quot; &quot;VcTools_Windows_aggregate_report.html&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\getTotals.py&quot; --api 2 &quot;VcTools_Windows_full_report.txt&quot;
%VECTORCAST_DIR%\vcdash -p &quot;%MANAGE_PROJECT%&quot; --history-dir=&quot;%HARVESTER_DIR%\\history&quot; --save-history
</winCommand>
      <unixCommand></unixCommand>
    </com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*_report.html, xml_data/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher plugin="vectorcast-coverage@0.10">
      <includes>**/coverage_results_*.xml</includes>
      <useThreshold>false</useThreshold>
      <healthReports>
        <minStatement>0</minStatement>
        <maxStatement>100</maxStatement>
        <minBranch>0</minBranch>
        <maxBranch>70</maxBranch>
        <minBasisPath>0</minBasisPath>
        <maxBasisPath>80</maxBasisPath>
        <minMCDC>0</minMCDC>
        <maxMCDC>80</maxMCDC>
        <minFunction>0</minFunction>
        <maxFunction>80</maxFunction>
        <minFunctionCall>0</minFunctionCall>
        <maxFunctionCall>80</maxFunctionCall>
      </healthReports>
    </com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.27">
        <script>import hudson.FilePath

if(manager.logContains(&quot;.*py did not execute correctly.*&quot;) || manager.logContains(&quot;.*Traceback .most recent call last.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Jenkins Integration Script Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Jenkins Integration Script Failure&quot;)
}
if (manager.logContains(&quot;.*Failed to acquire lock on environment.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Failed to acquire lock on environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Failed to acquire lock on environment&quot;)
}
if (manager.logContains(&quot;.*Environment Creation Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Environment Creation Failed&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Environment Creation Failed&quot;)
}
if (manager.logContains(&quot;.*FLEXlm Error.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;FLEXlm Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;FLEXlm Error&quot;)
}
if (manager.logContains(&quot;.*INCR_BUILD_FAILED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Build Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Build Error&quot;)
}
if (manager.logContains(&quot;.*NOT_LINKED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Link Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Link Error&quot;)
}
if (manager.logContains(&quot;.*Preprocess Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Preprocess Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Preprocess Error&quot;)
}
if (manager.logContains(&quot;.*Value Line Error - Command Ignored.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Test Case Import Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Test Case Import Error&quot;)
}

if(manager.logContains(&quot;.*Abnormal Termination on Environment.*&quot;)) 
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Abnormal Termination of at least one Environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Abnormal Termination of at least one Environment&quot;)
}
FilePath fp_i = new FilePath(manager.build.getWorkspace(),&apos;VcTools_Windows_manage_incremental_rebuild_report.html&apos;)
FilePath fp_f = new FilePath(manager.build.getWorkspace(),&apos;VcTools_Windows_full_report.html&apos;)
if (fp_i.exists() &amp;&amp; fp_f.exists())
{
    manager.build.description = fp_i.readToString() + &quot;&lt;br&gt;&quot; + fp_f.readToString()}
else
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;General Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.build.description = &quot;General Failure, Incremental Build Report or Full Report Not Present. Please see the console for more information&quot;
    manager.addBadge(&quot;warning.gif&quot;, &quot;General Error&quot;)
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>2</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>true</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>