<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Coverage Job for VcTools in Linux</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.30">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VECTORCAST_DIR</name>
          <description></description>
          <defaultValue>/mnt/nfs/shared/.VCAST_REGRESSION/JOB_6PM/LINUX</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH_NAME</name>
          <description>Specify the branch for which coverage is required</description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description></description>
          <defaultValue>user_trigger_${GIT_BRANCH_NAME}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VECTOR_LICENSE_FILE</name>
          <description></description>
          <defaultValue>27000@192.168.163.60</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:VectorSoftwareRI/Harvester.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>origin/${GIT_BRANCH_NAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>true</noTags>
        <reference></reference>
        <timeout>20</timeout>
        <depth>1</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>Redhat_32</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger plugin="parameterized-scheduler@0.5">
      <spec></spec>
      <parameterizedSpecification>00 01 * * 5  % BUILD_NAME=develop_timer</parameterizedSpecification>
    </org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTSetup plugin="vectorcast-execution@0.33">
      <environmentSetupWin></environmentSetupWin>
      <environmentSetupUnix></environmentSetupUnix>
      <executePreambleWin></executePreambleWin>
      <executePreambleUnix></executePreambleUnix>
      <environmentTeardownWin></environmentTeardownWin>
      <environmentTeardownUnix></environmentTeardownUnix>
      <optionUseReporting>false</optionUseReporting>
      <optionErrorLevel>Unstable</optionErrorLevel>
      <optionHtmlBuildDesc>HTML</optionHtmlBuildDesc>
      <optionExecutionReport>false</optionExecutionReport>
      <optionClean>false</optionClean>
      <waitLoops>1</waitLoops>
      <waitTime>30</waitTime>
      <usingSCM>false</usingSCM>
      <scm class="hudson.scm.NullSCM"/>
      <manageProjectName></manageProjectName>
      <jobName></jobName>
      <nodeLabel></nodeLabel>
    </com.vectorcast.plugins.vectorcastexecution.VectorCASTSetup>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe

#Common Variables used
export VECTORCAST_TO_USE=&quot;$VECTORCAST_DIR&quot;
export VECTORCAST_DIR=${WORKSPACE}/vcast

# Set 4.1.2 GCC in PATH
export PATH=/home/vectorindia/gcc-4.1.2/bin:$PATH

cp -r &quot;$VECTORCAST_TO_USE&quot; &quot;$VECTORCAST_DIR&quot;


#Create cover project
$VECTORCAST_DIR/clicast -lc cover env create VcTools
$VECTORCAST_DIR/clicast -lc template GNU_CPP_41
$VECTORCAST_DIR/clicast -lc option  COVERAGE_IO_TYPE VCAST_COVERAGE_IO_BUFFERED
$VECTORCAST_DIR/clicast -lc option  VCAST_APPEND_TO_TESTINSS TRUE
$VECTORCAST_DIR/clicast -lc option  VCAST_COVERAGE_FOR_HEADERS TRUE
$VECTORCAST_DIR/clicast -lc option  VCAST_DUMP_COVERAGE_AT_EXIT TRUE
$VECTORCAST_DIR/clicast -lc option  VCAST_COVER_STATEMENTS_BY_BLOCK TRUE

#Create vcshell.db for VcTools
# change the vctools version to the git commit id
export COMMIT_ID=$(git rev-parse --short HEAD)
sed -i &quot;s/.*#define _VCTOOLS_VERSION_.*/#define _VCTOOLS_VERSION_ \&quot;inst_${COMMIT_ID}\&quot;/&quot; harvester/inc/vcVersion.h
$VECTORCAST_DIR/vcshell  bash ./build.sh --enable_threads
#convert all relative path vcHarvesterSrcFilesForCoverageLinux.txt to absolute path
chmod +x abspath.py
$VECTORCAST_DIR/vpython abspath.py vcHarvesterSrcFilesForCoverageLinux.txt
#Collect metrics only for the files of interest
$VECTORCAST_DIR/vcutil addmetrics --filelist=vcHarvesterSrcFilesForCoverageLinux.txt

$VECTORCAST_DIR/clicover add_source_vcdb VcTools vcshell.db vcHarvesterSrcFilesForCoverageLinux.txt
$VECTORCAST_DIR/clicast -lc -e VcTools cover instrument statement

./build_instrumented.sh
cd build
./install.sh || if [[ $? == 1 ]]; then 
	true
    else
    	false
    fi


</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>HARVESTER_DIR=${WORKSPACE}
BUILD_NAME=${BUILD_NAME}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>LINUX_INSTRUMENTED_VCRUNTESTS</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe

export VECTORCAST_DIR=${WORKSPACE}/vcast
export MANAGE_PROJECT=&quot;${WORKSPACE}/VcToolsProject.vcm&quot;
export HISTORY_DIR=&quot;/mnt/nfs/shared/Harvester_Coverage_History/Linux&quot;
export VC_RESULT_DIR=$PWD/results

#Run the unit test cases
cd ${WORKSPACE}/build
./RunUnitTest.sh || export _VC_RUNTEST_RETURN_CODE_=$?
find . -name &quot;TESTINSS*&quot; -exec cat &apos;{}&apos; &gt;&gt; ${VC_RESULT_DIR}/UNITTEST.DAT &apos;;&apos;

#Run the examples
if [ -d ../release-packages ]; then
	rm -rf ../release-packages
fi
./release-package.sh || if [[ $? == 1 ]]; then 
		true
    else
    	false
    fi
cd ../release-packages/release/examples
./buildall.sh || export _VC_RUNTEST_RETURN_CODE_=$?
find . -name &quot;TESTINSS*&quot; -exec cat &apos;{}&apos; &gt;&gt; ${VC_RESULT_DIR}/EXAMPLES.DAT &apos;;&apos;
cd ${WORKSPACE}

#Add TESTINSS.DAT to cover project
declare -a results=(&quot;VCRUNTESTS&quot; &quot;LONGCMD&quot; &quot;CMDVERB&quot; &quot;OLD_VCAPP&quot; &quot;SEQ_DISPATCHER&quot; &quot;UNITTEST&quot; &quot;EXAMPLES&quot;)
for result in &quot;${results[@]}&quot;
do
	$VECTORCAST_DIR/clicast -lc -e VcTools cover result add  ${VC_RESULT_DIR}/$result.DAT
done

#Create Manage project
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --create
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --level Linux --create
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --level Linux/SystemTesting --create
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --group Cover --create
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --level Linux/SystemTesting --add Cover
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --import VcTools.vcp 
$VECTORCAST_DIR/manage -p &quot;${MANAGE_PROJECT}&quot; --group Cover --add VcTools

#Generate reports
$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/generate-results.py&quot; --api 2 &quot;${MANAGE_PROJECT}&quot; 
$VECTORCAST_DIR/manage --project &quot;${MANAGE_PROJECT}&quot; --full-status=&quot;VcTools_full_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;${MANAGE_PROJECT}&quot; --create-report=aggregate   --output=&quot;VcTools_aggregate_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;${MANAGE_PROJECT}&quot; --create-report=metrics     --output=&quot;VcTools_metrics_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;${MANAGE_PROJECT}&quot; --create-report=environment --output=&quot;VcTools_environment_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;${MANAGE_PROJECT}&quot; --full-status &gt; &quot;VcTools_full_report.txt&quot;
$VECTORCAST_DIR/vcdash --project &quot;${MANAGE_PROJECT}&quot; --history-dir=&quot;${HISTORY_DIR}&quot; --save-history 
$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/gen-combined-cov.py&quot; &quot;VcTools_aggregate_report.html&quot;
$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/getTotals.py&quot; --api 2 &quot;VcTools_full_report.txt&quot;

#Start vcdash as a daemon
echo #!/bin/bash &gt; vcdash.sh
echo cd $WORKSPACE &gt;&gt;vcdash.sh
echo $VECTORCAST_DIR/vcdash --project &quot;${MANAGE_PROJECT}&quot; --history-dir=&quot;${HISTORY_DIR}&quot; --run-server --vcdb vcshell.db --port 8080 &gt;&gt; vcdash.sh
chmod +x vcdash.sh
daemonize -E BUILD_ID=dontKillMe -E VECTORCAST_DIR=$VECTORCAST_DIR $PWD/vcdash.sh
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*_report.html, xml_data/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher plugin="vectorcast-coverage@0.10">
      <includes>**/coverage_results_*.xml</includes>
      <useThreshold>false</useThreshold>
      <healthReports>
        <minStatement>0</minStatement>
        <maxStatement>100</maxStatement>
        <minBranch>0</minBranch>
        <maxBranch>0</maxBranch>
        <minBasisPath>0</minBasisPath>
        <maxBasisPath>0</maxBasisPath>
        <minMCDC>0</minMCDC>
        <maxMCDC>0</maxMCDC>
        <minFunction>0</minFunction>
        <maxFunction>0</maxFunction>
        <minFunctionCall>0</minFunctionCall>
        <maxFunctionCall>0</maxFunctionCall>
      </healthReports>
    </com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.4">
      <script plugin="script-security@1.43">
        <script>import hudson.FilePath
import java.util.regex.Pattern

if(manager.logContains(&quot;.*py did not execute correctly.*&quot;) || manager.logContains(&quot;.*Traceback .most recent call last.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Jenkins Integration Script Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Jenkins Integration Script Failure&quot;)
}
if (manager.logContains(&quot;.*Failed to acquire lock on environment.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Failed to acquire lock on environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Failed to acquire lock on environment&quot;)
}
if (manager.logContains(&quot;.*Environment Creation Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Environment Creation Failed&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Environment Creation Failed&quot;)
}
if (manager.logContains(&quot;.*FLEXlm Error.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;FLEXlm Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;FLEXlm Error&quot;)
}
if (manager.logContains(&quot;.*INCR_BUILD_FAILED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Build Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Build Error&quot;)
}
if (manager.logContains(&quot;.*NOT_LINKED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Link Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Link Error&quot;)
}
if (manager.logContains(&quot;.*Preprocess Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Preprocess Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Preprocess Error&quot;)
}
if (manager.logContains(&quot;.*Value Line Error - Command Ignored.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Test Case Import Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Test Case Import Error&quot;)
}

if(manager.logContains(&quot;.*Abnormal Termination on Environment.*&quot;)) 
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Abnormal Termination of at least one Environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Abnormal Termination of at least one Environment&quot;)
}
FilePath fp_i = new FilePath(manager.build.getWorkspace(),&apos;VcTools_manage_incremental_rebuild_report.html&apos;)
FilePath fp_f = new FilePath(manager.build.getWorkspace(),&apos;VcTools_full_report.html&apos;)
if ( fp_f.exists())
{
    manager.build.description =  fp_f.readToString()}
else
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;General Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.build.description = &quot;General Failure,  Full Report Not Present. Please see the console for more information&quot;
    manager.addBadge(&quot;warning.gif&quot;, &quot;General Error&quot;)
}

def buildLog = manager.build.getLog()
Pattern pattern = Pattern.compile(&apos;Coverage: Statement.*?[(](.*?)[%][)]&apos;)
int coverage = 0
buildLog.eachMatch pattern, {
   manager.listener.logger.println(it)
    coverage = Integer.valueOf(it[1])
   }

if ( coverage &lt; 60) {
      manager.buildFailure()
       manager.addBadge(&quot;error.gif&quot;, &quot;Coverage percentage dropped below 60%&quot;)
 }
</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>2</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>tamil.selvan@vectorcast.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.StatusChangedTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>both</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.StatusChangedTrigger>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>Coverage Linux Job</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>tamil.selvan@vectorcast.com</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.9"/>
    <org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper plugin="preSCMbuildstep@0.3">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>#!/bin/bash

cd $WORKSPACE

#kill the vcdash
killall -9 vcdash

rm -rf *</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <failOnError>false</failOnError>
    </org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>${ENV, var=&quot;BUILD_NAME&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>false</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>