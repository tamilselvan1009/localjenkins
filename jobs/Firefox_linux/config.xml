<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.30">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>LINUX_VECTORCAST_DIR</name>
          <description>Vectorcast directory</description>
          <defaultValue>/home/vectorindia/.VCAST_REGRESSION/89129</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>summary_file</name>
          <description></description>
          <defaultValue>summary.txt</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>top_level_archive_dir</name>
          <description></description>
          <defaultValue>/mnt/nfs/shared/firefox_results/linux</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description></description>
          <defaultValue>user_trigger</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>Firefox_linux</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>01 14 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe


echo $LINUX_VECTORCAST_DIR

##########################################################################################
##########################################################################################
#############    SET VCTOOLS PACKAGE    ##################################################
#export VCTOOLS_PACKAGE=&quot;/mnt/nfs/shared/88425/release32.tar.gz&quot;
#

#VCTOOLS_PACKAGE=`find /mnt/nfs/shared/Jenkins_Harvester_89696/Linux -maxdepth 1 -name *.tgz`

#############    SET BOOST DIRECTORY   ##################################################
export BOOST_DIR=&quot;/mnt/nfs/TOOLS/boost-1.53.0&quot;

############     SET VECTOR LICENSE FILE ################################################
export VECTOR_LICENSE_FILE=27000@192.168.163.60

############     SET VECTORCAST_DIR      ################################################
export VECTORCAST_DIR=$LINUX_VECTORCAST_DIR

##########################################################################################
##########################################################################################

#if [ -f  $VCTOOLS_PACKAGE ];then
#    echo $VCTOOLS_PACKAGE
#	tar -zxvf $VCTOOLS_PACKAGE
#    cd release
#    ./install.sh
#    cd ..
#else
#	echo &quot;VcTools package not available in $VCTOOLS_PACKAGE&quot;
#    exit  1
#fi


artifact=(&quot;Metrics Collected&quot; &quot;Successful for&quot; &quot;failed for&quot;)
_expected=(&quot;Passed&quot; &quot;Failed&quot; &quot;Failed due to lesser artifact&quot;)
_result=${_expected[0]}
_threshold=4800

#function to handle error 
handle_error()
{
	export _error_=$?
	if [ ! &quot;$_error_&quot; == &quot;0&quot; ];then
		echo &quot;      Command failed &quot;
		export _RETURN_CODE_=$_error_
	fi
}

#global variable to hold variable
_var_=&quot;--&quot;
#function to generate tabular file
Extract()
{

output=`grep &quot;real&quot; $1 | awk &apos;{printf(&quot;%s&quot;,$2)}&apos;`
grep &quot;real&quot; $1 | awk &apos;{printf(&quot;         %s         &quot;,$2)}&apos;&gt;&gt;$summary_file
echo -n -e  $2 &gt;&gt;$summary_file
echo -n -e &quot;-&quot; &gt;&gt;$summary_file
echo -n -e $3  &gt;&gt;$summary_file
echo -n -e  &quot;   &quot;&gt;&gt;$summary_file
if [ ! -z &quot;$4&quot; ] &amp;&amp; [ ! -z &quot;$5&quot; ]
then
_var_=`grep &quot;$5&quot; $4 | grep -o &apos;[0-9]\+&apos;`
if [ &quot;$5&quot; == &quot;${artifact[1]}&quot; ]
then 
if [ &quot;$_var_&quot; -ge &quot;$_threshold&quot; ]
then
_result=${_expected[0]}
else
_result=${_expected[1]}
fi
fi
fi
echo -n -e &quot; $_var_ &quot; &gt;&gt;$summary_file
echo -n -e &quot; $_var_ &quot; &gt;&gt;$summary_file
_var_=&quot;--&quot;
out=`echo $output | awk &apos;{split ($0,a,&quot;m&quot;);print a[1]}&apos;`
if  [ $out -ge $2 ] &amp;&amp; [ $out -le $3 ] 
then 
echo -n  -e &quot; Passed &quot;&gt;&gt;$summary_file
else
echo  -n -e &quot; Failed &quot;&gt;&gt;$summary_file
fi
echo $_result &gt;&gt;$summary_file 

}
#secondary function to help generate Extract format
Extract2()
{
if [ ! &quot;$2&quot; == &quot;vcdb_getfiles.out.txt&quot; ]
then  
_var_=`cat $2 | wc -l`
else
_var_=`cat $2 | wc -l`
fi
Extract $1 $3 $4
}

#Set up Environment varaibles
#export VECTORCAST_DIR=${LINUX_VECTORCAST_DIR}
#export VECTOR_LICENSE_FILE=27000@192.168.163.60
export PYTHONPATH=/usr/lib/python2.7/dist-packages:PYTHONPATH

#Print tools version in console for reference
$VECTORCAST_DIR/vcshell --version
$VECTORCAST_DIR/clicast --version

#Copy the firefox source 
cp -r /home/vectorindia/firefox_regression/* $WORKSPACE/

#timing constant
vcshelltime=20

. ./make_config

#print date 
echo $(date) &gt;&gt;sol.txt

#print VcTools version in log file
#echo &quot; VcTools Version : ` $VECTORCAST_DIR/vcshell --version | grep Version | awk &apos;{print $3}&apos;` &quot; &gt;&gt; $summary_file
echo &quot; VcTools Version : ` $VECTORCAST_DIR/vcshell --version | grep Version | awk &apos;{print $3}&apos;` &quot; &gt;&gt; sol.txt
#echo  &gt;&gt; $summary_file

#tabular format for the file
echo -e  &quot;Command               Time      ExpectedTime  Artifact ExpectedArtifact   TimmingResult   ArtiResult  &quot; &gt;&gt;$summary_file
echo -e  &quot;Command               Time      ExpectedTime  Artifact ExpectedArtifact   TimmingResult   ArtiResult  &quot; &gt;&gt;sol.txt

#Execute and measure timings for vcshell make -j8
echo -n -e &quot;VchellMake-j4 \t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcshell --db=pristine_vcshell.db make -j4 &gt;vcshell_make.out.txt 2&gt;&amp;1) 2&gt;&gt; vcshell_make.out || handle_error
Extract vcshell_make.out $vcshelltime `expr $vcshelltime + 6` || handle_error


#Execute and measure timings for vcshell metrics -j8
#make clean
#echo -n -e &quot;VcshellMetrics-j4\t&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcshell --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --metrics make -j4 &gt;vcshell_metrics.out.txt 2&gt;&amp;1) 2&gt;&gt; vcshell_metrics.out  || handle_error
#Extract vcshell_metrics.out `expr $vcshelltime + 55`  `expr $vcshelltime + 100` vcshell_metrics.out.txt &quot;${artifact[0]}&quot; || handle_error

#Execute and mesaure timings for getmetrics
#echo -n -e &quot;VcdbGetmetrics\t&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcdb getmetrics &gt; vcdb_getmetrics_for_vcshell_metrics.out.txt 2&gt;&amp;1) 2&gt;&gt;vcdb_getmetrics.out || handle_error
#Extract2 vcdb_getmetrics.out vcdb_getmetrics_for_vcshell_metrics.out.txt 0 1


#Execute and measure timings for clearmetrics
cp pristine_vcshell.db vcutil_metrics.db
#echo -n -e &quot;VcdbClearmetrics&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcdb clearmetrics --db=vcutil_metrics.db &gt; vcdb_clearmetrics.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_clearmetrics.out || handle_error
#Extract vcdb_clearmetrics.out 0 1

#Execute and measure timings for vcutil addmetrics
echo  -n -e &quot;VcutilAddmetrics\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db  --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --all addmetrics  &gt; vcutil_addmetrics.out.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_addmetrics.out || handle_error
Extract vcutil_addmetrics.out `expr $vcshelltime + 63`  `expr $vcshelltime + 75` vcutil_addmetrics.out.txt &quot;${artifact[0]}&quot; || handle_error


#Verify metrics recorded in vcutil
echo -n -e &quot;VcdbGetmetrics\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getmetrics  --db=vcutil_metrics.db &gt; vcdb_getmetrics_for_vcshell_metrics.out.txt 2&gt;&amp;1) 2&gt;&gt;vcdb_getmetrics_vcutil.out || handle_error
Extract2 vcdb_getmetrics_vcutil.out vcdb_getmetrics_for_vcshell_metrics.out.txt 0 1  || handle_error


#Vcutil Instrument 
echo -n -e &quot;VcutilInstrument--jobs=4\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcutil  --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --all --jobs=4 --destination_dir=InstFiles --coverage_type=statement instrument  &gt; vcutil_instr.out.txt 2&gt;&amp;1) 2&gt;&gt; vcutil_instrument.out || handle_error
Extract vcutil_instrument.out `expr $vcshelltime + 10` `expr $vcshelltime + 22` vcutil_instr.out.txt &quot;${artifact[1]}&quot; || handle_error

#Vcutil Quick parse
echo -n -e &quot;VcutilQikparse--jobs=4\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --all --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse.out || handle_error
Extract vcutil_qikparse.out `expr $vcshelltime - 3` `expr $vcshelltime + 5` vcutil_quick.out &quot;${artifact[1]}&quot; || handle_error


#vcdb getfiles
echo -n -e &quot;VcdbGetfiles\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getfiles --db=pristine_vcshell.db &gt;vcdb_getfiles.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getfiles || handle_error
Extract2 vcdb_getfiles vcdb_getfiles.out.txt 0 1

#vcdb dumpcmd
echo -n -e &quot;VcdbDumpcmd\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb dumpcommands --db=pristine_vcshell.db &gt;vcdb_dumpcommand.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_dump || handle_error
Extract vcdb_dump 0 1

#vcdb dumpverb
echo -n -e &quot;VcdbDumpverb\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb dumpverbs --db=pristine_vcshell.db &gt; vcdb_dumpverbs.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_dumpv  || handle_error
Extract vcdb_dumpv 0 1

#vcdb getobjpath
echo -n -e &quot;VcdbDbgetopbjpath\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getobjpath --filelist=vcdb_getfiles.out.txt --db=pristine_vcshell.db &gt; vcdb_getobjpath.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getobjpath  || handle_error
Extract vcdb_getobjpath 0 1

#vcdb getapps
echo -n -e &quot;VcdbGetapps\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getapps --db=pristine_vcshell.db &gt;vcdb_getapps.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getapps  || handle_error
Extract vcdb_getapps 0 1

#get commentdata
echo -n -e &quot;VcdbGetcommentdata\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getcommentdata  --db=pristine_vcshell.db &gt; vcdb_getcommentdata.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getcommentdata || handle_error
Extract vcdb_getcommentdata 0 1

#get vcdb metrics
echo -n -e &quot;VcdbGetmetrics\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getmetrics --db=vcutil_metrics.db &gt; vcdb_getmetrics_data.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_met  || handle_error
Extract vcdb_met 0 1

#get vcdb path
echo -n -e &quot;VcdbGetpaths\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getpaths  --db=pristine_vcshell.db &gt; vcdb_getpaths_data.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getpath  || handle_error
Extract vcdb_getpath 0 1

#get vcdb tags
echo -n -e &quot;VcdbGettags\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb gettags  --db=pristine_vcshell.db &gt; vcdb_gettags_data.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_gettags || handle_error
Extract vcdb_gettags 0 1

#get linkcmd
echo -n -e &quot;VcdbGetlinkcmd\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb getlinkcmd --db=pristine_vcshell.db &gt; vcdb_getlinkcmd_data.out.txt 2&gt;&amp;1) 2&gt;&gt;vcdb_getlinkcmd || handle_error
Extract vcdb_getlinkcmd 0 1

#get list
echo -n -e &quot;VcdbList-prefixes\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb list-prefixes  --db=pristine_vcshell.db &gt; vcdb_list-prefixes_data.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getlist || handle_error
Extract vcdb_getlist 0 1

#getcmd.sh
echo -n -e &quot;Getcmd.sh\t&quot;&gt;&gt;$summary_file
cp -r ../../firefox_scripts/* .
chmod +x getcmd.sh
time (./getcmd.sh pristine_vcshell.db vcdb_getfiles.out.txt &gt; getcommands_data.out.txt 2&gt;&amp;1) 2&gt;&gt; getcmd || handle_error
Extract getcmd 1 3

#getcommentdensity
echo -n -e &quot;GetcommentDensity.sh\t&quot;&gt;&gt;$summary_file
chmod +x getcommentdensity.sh
time (./getcommentdensity.sh pristine_vcshell.db vcdb_getfiles.out.txt &gt; get_commentdensit_out.txt 2&gt;&amp;1) 2&gt;&gt; getcomment || handle_error
Extract getcomment 1 3

#getincludes
echo -n -e &quot;Getincludes.sh\t&quot;&gt;&gt;$summary_file
chmod +x getincludes.sh
time (./getincludes.sh pristine_vcshell.db vcdb_getfiles.out.txt  &gt; get_includes_out.txt 2&gt;&amp;1) 2&gt;&gt;vcdb_getinclude || handle_error
Extract vcdb_getinclude 0 1

#getdefines
echo -n -e &quot;Getdefines.sh\t&quot;&gt;&gt;$summary_file
chmod +x getdefines.sh
time (./getdefines.sh pristine_vcshell.db vcdb_getfiles.out.txt  &gt; get_defines_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getdefine || handle_error
Extract vcdb_getdefine 0 1

#getoptions
echo -n -e &quot;Getoptions.sh\t&quot;&gt;&gt;$summary_file
chmod +x getoptions.sh || handle_error
time (./getoptions.sh pristine_vcshell.db vcdb_getfiles.out.txt  &gt; get_options_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getoption || handle_error
Extract vcdb_getoption 0 3

#getpopt
echo -n -e &quot;Getpoptions.sh\t&quot;&gt;&gt;$summary_file
chmod +x getppopts.sh || handle_error
time (./getppopts.sh pristine_vcshell.db vcdb_getfiles.out.txt &gt;get_poptions_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getpoption || handle_error
Extract vcdb_getpoption 2 4

#getuniindex
echo -n -e &quot;Getunitindex.sh\t&quot;&gt;&gt;$summary_file
chmod +x getunitindex.sh || handle_error
time (./getunitindex.sh pristine_vcshell.db vcdb_getfiles.out.txt &gt;get_unitindex_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getunitindex || handle_error
Extract vcdb_getunitindex 0 1

#getpathtype
echo -n -e &quot;GetPathtype.sh\t&quot;&gt;&gt;$summary_file
chmod +x getpathtype.sh || handle_error
time (./getpathtype.sh pristine_vcshell.db vcdb_getfiles.out.txt &gt;get_pathtypes_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getpathtype || handle_error
Extract vcdb_getpathtype 0 1

#setpathtype
echo -n -e &quot;Setpathtype.sh\t&quot;&gt;&gt;$summary_file
chmod +x setpathtype.sh || handle_error
time (./setpathtype.sh pristine_vcshell.db vcdb_getfiles.out.txt  &gt; set_pathtypes_out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_setpathtype || true
Extract vcdb_setpathtype 0 1

#getallcmdlines
echo -n -e &quot;getallcmdlines\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcdb --db=pristine_vcshell.db getallcmdlines  &gt; vcdb_getcmdlines.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getallcommandlines || handle_error
Extract vcdb_getallcommandlines 0 1

#vcshell putcommand
echo -n -e &quot;vcshellputcommand\t&quot;&gt;&gt;$summary_file
time ($VECTORCAST_DIR/vcshell --db=putcmd.db putcommand --inputcmds=vcdb_getcmdlines.out.txt &gt; vcshell_putcmd.out.txt 2&gt;&amp;1) 2&gt;&gt;vcshell_putcommand  || handle_error
Extract vcshell_putcommand 0 1

#putcommand 87613
#echo -n -e &quot;vcshellputcommand_87613\t&quot;&gt;&gt;$summary_file
#tar -zxvf /mnt/nfs/Resources/artefacts/putcmd_87613.tar.gz
#cd putcmd_87613
#$VECTORCAST_DIR/vpython ./generate_stage.py
#$VECTORCAST_DIR/clicast -lc template gnu_cpp_48
#time ($VECTORCAST_DIR/vcshell putcommand --inputcmds=huge_time_cmds.txt &gt; vcshell_putcmd_87613.out.txt 2&gt;&amp;1) 2&gt;&gt;vcshell_putcommand_87613  || handle_error
#Extract vcshell_putcommand_87613 0 1

#command to be executed on 
#chmod +x ../../per.sh || handle_error
#../.././per.sh || handle_error

#command to be executed on shared drive
#chmod +x ../../perf.sh || handle_error
#cp ../../perf.sh . || handle_error
#. ./perf.sh /mnt/nfs/shared/shekhar/Firefox/pristine_vcshell.db || handle_error


# to be done and change sum.txt contains the output which perf.sh use to do
#echo &quot;hello&quot;&gt;&gt;sum.txt
#Getallcmdlines
#echo -n -e &quot;Getallcmdlines\t&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcdb getallcmdlines  &gt; vcdb_getcommandlines.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getallcommandlines || handle_error
#Extract vcdb_getallcommandlines 0 1

#rename the vcshell.db
#mv vcshell.db old.db

#putcommand 
#echo -n -e &quot;putcommand\t&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcshell putcommand --inputcmds=vcdb_getcommandlines.out.txt &gt; vcdb_getcommandlines.out.txt 2&gt;&amp;1) 2&gt;&gt;vcshell_putcommand  || handle_error
#Extract vcshell_putcommand 2 4

#Getallcmdlines for new db
#echo -n -e &quot;Getallcmdlines\t&quot;&gt;&gt;$summary_file
#time ($VECTORCAST_DIR/vcdb getallcmdlines &gt; vcdb_getnewcommandlines.out.txt 2&gt;&amp;1) 2&gt;&gt; vcdb_getnewallcommandlines || handle_error
#Extract vcdb_getnewallcommandlines 0 1

#finding differnece 
#diff vcdb_getcommandlines.out.txt  vcdb_getnewcommandlines.out.txt &gt; diff.txt ||  handle_error




#taking 1000 files
#head -1000 vcdb_getfiles.out.txt &gt; first1000.txt || handle_error 
#echo -n -e &quot;qikparse1000\t&quot;&gt;&gt;$summary_file || handle_error
#time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=first1000.txt --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick1.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse1 || handle_error
#Extract vcutil_qikparse1 0 2 vcutil_quick1.out &quot;${artifact[1]}&quot; || handle_error

#next 1000 files
#sed -n -e &apos;1001,2000p&apos; vcdb_getfiles.out.txt &gt; second.txt || handle_error
#echo -n -e &quot;qikparse2000\t&quot;&gt;&gt;$summary_file || handle_error
#time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=second.txt --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick2.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse2 || handle_error
#Extract vcutil_qikparse2 0 2 vcutil_quick2.out &quot;${artifact[1]}&quot; || handle_error

#next 1000 files
#sed -n -e &apos;2001,3000p&apos; vcdb_getfiles.out.txt &gt; third.txt || handle_error
#echo -n -e &quot;qikparse3000\t&quot;&gt;&gt;$summary_file || handle_error
#time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=third.txt --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick3.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse3 || handle_error
#Extract vcutil_qikparse3 0 2 vcutil_quick3.out &quot;${artifact[1]}&quot; || handle_error


#next 1000 files
#sed -n -e &apos;3001,4000p&apos; vcdb_getfiles.out.txt &gt; fourth.txt || handle_error
#echo -n -e &quot;qikparse4000\t&quot;&gt;&gt;$summary_file || handle_error
#time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=fourth.txt --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick4.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse4 || handle_error
#Extract vcutil_qikparse4 0 2 vcutil_quick4.out &quot;${artifact[1]}&quot; || handle_error


#next 1000 files
#sed -n -e &apos;4001,5000p&apos; vcdb_getfiles.out.txt &gt; fif.txt || handle_error
#echo -n -e &quot;qikparse5000\t&quot;&gt;&gt;$summary_file || handle_error
#time ($VECTORCAST_DIR/vcutil --db=vcutil_metrics.db --flags=&quot;-include=1,-f=1,-std=gnu++0x,-m=1,-W=1&quot; --filelist=third.txt --jobs=4 --destination_dir=Quick quickparse &gt; vcutil_quick5.out 2&gt;&amp;1) 2&gt;&gt; vcutil_qikparse5 || handle_error
#Extract vcutil_qikparse5 0 2 vcutil_quick5.out &quot;${artifact[1]}&quot; || handle_error


#if ! grep &quot;Failed&quot; $summary_file &gt;&gt; sol.txt 
#then
#	echo &quot;NO FAILURE FOUND&quot; &gt;&gt; sol.txt
#fi    

(column -t $summary_file) &gt; temp.txt || handle_error
rm -rf $summary_file || handle_error
cp temp.txt $summary_file || handle_error
#quick 
#Archive the artifacts
cd $top_level_archive_dir
archive_dir=$(date +%d)
if [ -d $archive_dir ];then
	rm -rf $archive_dir
fi
mkdir $archive_dir
cp $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu/$summary_file $archive_dir/.
cp $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu/*.out $archive_dir/.
cp $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu/*.out.txt $archive_dir/.
cp $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu/sol.txt $archive_dir/.
#copy sum.txt to the directory for mounted db  
#cp $WORKSPACE/mozilla-release/obj-x86_64-unknown-linux-gnu/sum.txt $archive_dir/.
exit /b $_RETURN_CODE_
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>kavya@vectorcast.com</recipientList>
      <configuredTriggers/>
      <contentType>text/plain</contentType>
      <defaultSubject>Firefox Linux Result</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>kavya@vectorcast.com</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.9"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>${ENV,var=&quot;BUILD_NAME&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>false</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>