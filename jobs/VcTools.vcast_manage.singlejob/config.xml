<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Single job to run the manage project: /mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.1.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/VectorSoftwareRI/Harvester.git</url>
        <credentialsId>git</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/develop</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>Redhat_32</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTSetup plugin="vectorcast-execution@0.18"/>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand plugin="vectorcast-execution@0.18">
      <winCommand>
set VCAST_RPTS_PRETTY_PRINT_HTML=FALSE
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --status
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --release-locks
 %VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --build-execute --incremental --output &quot;VcTools_manage_incremental_rebuild_report.html&quot; 

%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\generate-results.py&quot; --api 2 &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; 
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --full-status=&quot;VcTools_full_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=aggregate   --output=&quot;VcTools_aggregate_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=metrics     --output=&quot;VcTools_metrics_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=environment --output=&quot;VcTools_environment_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --full-status &gt; &quot;VcTools_full_report.txt&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\gen-combined-cov.py&quot; &quot;VcTools_aggregate_report.html&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\getTotals.py&quot; --api 2 &quot;VcTools_full_report.txt&quot;

</winCommand>
      <unixCommand>
export VCAST_RPTS_PRETTY_PRINT_HTML=FALSE
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --status 
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --release-locks 

cd /mnt/nfs/shared/Harvester_Coverage/Linux/Harvester/cover
$VECTORCAST_DIR/clicast -lc -e harvester cover instrument none
git checkout master
git branch -D develop
git checkout develop
git pull origin develop

cd ..
rm vcshell.*
$VECTORCAST_DIR/vcshell --metrics bash ./build.sh
$VECTORCAST_DIR/vcdb clearmetrics --file=vc_sqlite3.c

cd cover
$VECTORCAST_DIR/clicast -lc -e harvester cover instrument statement

cd ..
./build.sh --vcast_coverage

 $VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --build-execute --incremental --output &quot;VcTools_manage_incremental_rebuild_report.html&quot;

$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/generate-results.py&quot; --api 2 &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; 
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --full-status=&quot;VcTools_full_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=aggregate   --output=&quot;VcTools_aggregate_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=metrics     --output=&quot;VcTools_metrics_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --create-report=environment --output=&quot;VcTools_environment_report.html&quot;
$VECTORCAST_DIR/manage --project &quot;/mnt/nfs/shared/Harvester_Coverage_job/VcTools.vcm&quot; --full-status &gt; &quot;VcTools_full_report.txt&quot;
$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/gen-combined-cov.py&quot; &quot;VcTools_aggregate_report.html&quot;
$VECTORCAST_DIR/vpython &quot;$WORKSPACE/vc_scripts/getTotals.py&quot; --api 2 &quot;VcTools_full_report.txt&quot;

</unixCommand>
    </com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*_report.html, execution/**, management/**, xml_data/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <xunit plugin="xunit@1.102">
      <types>
        <CheckType>
          <pattern>**/test_results_*.xml</pattern>
          <skipNoTestFiles>true</skipNoTestFiles>
          <failIfNotNew>false</failIfNotNew>
          <deleteOutputFiles>true</deleteOutputFiles>
          <stopProcessingIfError>true</stopProcessingIfError>
        </CheckType>
      </types>
      <thresholds>
        <org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
        <org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
      </thresholds>
      <thresholdMode>1</thresholdMode>
      <extraConfiguration>
        <testTimeMargin>3000</testTimeMargin>
      </extraConfiguration>
    </xunit>
    <com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher plugin="vectorcast-coverage@0.10">
      <includes>**/coverage_results_*.xml</includes>
      <useThreshold>false</useThreshold>
      <healthReports>
        <minStatement>0</minStatement>
        <maxStatement>100</maxStatement>
        <minBranch>0</minBranch>
        <maxBranch>70</maxBranch>
        <minBasisPath>0</minBasisPath>
        <maxBasisPath>80</maxBasisPath>
        <minMCDC>0</minMCDC>
        <maxMCDC>80</maxMCDC>
        <minFunction>0</minFunction>
        <maxFunction>80</maxFunction>
        <minFunctionCall>0</minFunctionCall>
        <maxFunctionCall>80</maxFunctionCall>
      </healthReports>
    </com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.27">
        <script>import hudson.FilePath

if(manager.logContains(&quot;.*py did not execute correctly.*&quot;) || manager.logContains(&quot;.*Traceback .most recent call last.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Jenkins Integration Script Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Jenkins Integration Script Failure&quot;)
}
if (manager.logContains(&quot;.*Failed to acquire lock on environment.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Failed to acquire lock on environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Failed to acquire lock on environment&quot;)
}
if (manager.logContains(&quot;.*Environment Creation Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Environment Creation Failed&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Environment Creation Failed&quot;)
}
if (manager.logContains(&quot;.*FLEXlm Error.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;FLEXlm Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;FLEXlm Error&quot;)
}
if (manager.logContains(&quot;.*INCR_BUILD_FAILED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Build Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Build Error&quot;)
}
if (manager.logContains(&quot;.*NOT_LINKED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Link Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Link Error&quot;)
}
if (manager.logContains(&quot;.*Preprocess Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Preprocess Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Preprocess Error&quot;)
}
if (manager.logContains(&quot;.*Value Line Error - Command Ignored.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Test Case Import Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Test Case Import Error&quot;)
}

if(manager.logContains(&quot;.*Abnormal Termination on Environment.*&quot;)) 
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Abnormal Termination of at least one Environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Abnormal Termination of at least one Environment&quot;)
}
FilePath fp_i = new FilePath(manager.build.getWorkspace(),&apos;VcTools_manage_incremental_rebuild_report.html&apos;)
FilePath fp_f = new FilePath(manager.build.getWorkspace(),&apos;VcTools_full_report.html&apos;)
if (fp_i.exists() &amp;&amp; fp_f.exists())
{
    manager.build.description = fp_i.readToString() + &quot;&lt;br&gt;&quot; + fp_f.readToString()}
else
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;General Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.build.description = &quot;General Failure, Incremental Build Report or Full Report Not Present. Please see the console for more information&quot;
    manager.addBadge(&quot;warning.gif&quot;, &quot;General Error&quot;)
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>2</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>true</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>