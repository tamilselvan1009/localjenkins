<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Coverage Job for VcTools in Windows</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VECTORCAST_DIR</name>
          <description></description>
          <defaultValue>N:\\shared\\.VCAST_REGRESSION\\JOB_6PM\\VCAST_WINDOWS</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH_NAME</name>
          <description>Specify the branch for which coverage is required</description>
          <defaultValue>develop__73369_code_coverage_improvements</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description></description>
          <defaultValue>user_trigger_${GIT_BRANCH_NAME}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:VectorSoftwareRI/Harvester.git</url>
        <credentialsId>git</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>origin/${GIT_BRANCH_NAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>20</timeout>
        <depth>1</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>Windows_54</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger plugin="parameterized-scheduler@0.5">
      <spec></spec>
      <parameterizedSpecification>00 02 * * *  % BUILD_NAME=develop_timer</parameterizedSpecification>
    </org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTSetup plugin="vectorcast-execution@0.18"/>
    <com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand plugin="vectorcast-execution@0.18">
      <winCommand>call &quot;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcvarsall.bat&quot;

REM######################################################################################
::Common variables used
set &quot;VECTORCAST_DIR_TO_USE=%VECTORCAST_DIR%&quot;
set &quot;VECTORCAST_DIR=%WORKSPACE%\\vcast&quot;
set &quot;VC_RESULT_DIR=%WORKSPACE%\\result&quot;
set &quot;VC_HISTORY_DIR=N:\\shared\\Harvester_Coverage_History\\Windows&quot;
set &quot;MANAGE_PROJECT=%WORKSPACE%\\VcToolsProject.vcm&quot;

xcopy /s %VECTORCAST_DIR_TO_USE% %VECTORCAST_DIR%

REM######################################################################################
::Create vcshell.db
%VECTORCAST_DIR%\vcshell buildWin.bat msvc9 --arch=win32 --config=Release
%VECTORCAST_DIR%\vcutil addmetrics --filelist=vcHarvesterSrcFilesForCoverageWindows.txt

:: Change the VcTools version to the git commit id
FOR /F &quot;delims=&quot; %%i IN (&apos;git rev-parse --short HEAD&apos;) DO set version=%%i
call powershell -Command &quot;(gc ./harvester/inc/vcVersion.h) -replace &apos;.*#define _VCTOOLS_VERSION_.*&apos;, &apos;#define _VCTOOLS_VERSION_ \&quot;%version%\&quot;&apos;  | Out-File harvester\inc\vcVersion.h&quot;

REM######################################################################################
::Create the cover project
%VECTORCAST_DIR%\clicast -lc cover env create VcTools
%VECTORCAST_DIR%\clicast -lc template VISUAL_CPP_CPP_2008
%VECTORCAST_DIR%\clicast -lc option  COVERAGE_IO_TYPE VCAST_COVERAGE_IO_BUFFERED
%VECTORCAST_DIR%\clicast -lc option  VCAST_APPEND_TO_TESTINSS TRUE
%VECTORCAST_DIR%\clicast -lc option  VCAST_COVERAGE_FOR_HEADERS TRUE
%VECTORCAST_DIR%\clicast -lc option  VCAST_DUMP_COVERAGE_AT_EXIT TRUE
%VECTORCAST_DIR%\clicast -lc option  VCAST_COVER_STATEMENTS_BY_BLOCK TRUE
%VECTORCAST_DIR%\clicast -lc option  C_ALT_COMPILE_CMD &quot;CL /c /Zi /EHsc /MD&quot;
%VECTORCAST_DIR%\clicast -lc option  C_ALT_PREPROCESS_CMD &quot;CL /E /C /EHsc /MD&quot;
%VECTORCAST_DIR%\clicast -lc option  C_COMPILE_CMD &quot;CL /c /Zi /EHsc /MD&quot;
%VECTORCAST_DIR%\clicast -lc option  C_PREPROCESS_CMD &quot;CL /E /C /EHsc /MD&quot;
%VECTORCAST_DIR%\clicover add_source_vcdb VcTools vcshell.db vcHarvesterSrcFilesForCoverageWindows.txt
%VECTORCAST_DIR%\clicast -lc -e VcTools cover instrument statement

::Build instrumented code
call build_instrumented.bat
cd build
install.bat

::Configure tests to run
mkdir tbuild
cd tbuild
cmake -G&quot;Visual Studio 10&quot; ..\tests
call powershell -Command &quot;(gc vc_test_add_dir) -replace &apos;VcshellTest/MixedBitnessTest&apos;, &apos;&apos;  | Out-File vc_test_add_dir&quot;
call powershell -Command &quot;(gc vc_test_add_dir) | ? {$_.trim() -ne &apos;&apos; } | set-content vc_test_add_dir&quot;

::Run VcRunTests and collect results
%VECTORCAST_DIR%\vpython VcRunTests.py --metrics
mkdir &quot;%VC_RESULT_DIR%
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\VCRUNTESTS.DAT &apos;;&apos;

::Run LongCmd Testa and collect results
mkdir longcmd
cd longcmd
cmake -G&quot;Visual Studio 10&quot; ..\..\tests\LongCmd
%VECTORCAST_DIR%\vpython ..\VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\LONGCMD.DAT &apos;;&apos;
cd ..

::Run CMDVERB and collect results
cd MathTest\Matrix
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
%VECTORCAST_DIR%\vpython ..\..\VcRunTests.py --cmdverb
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\CMDVERB.DAT &apos;;&apos;

::Run OLD DB Interface and collect result
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
set _VC_OLD_VCAPP_DB_IF_=1
%VECTORCAST_DIR%\vpython ..\..\VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\OLD_VCAPP.DAT &apos;;&apos;

::Run Sequential Dispatcher and Collect Result
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\rm &apos;{}&apos; &apos;;&apos;
set _VC_SEQ_DISPATCHER_=1
%VECTORCAST_DIR%\vpython ..\..\VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\SEQ_DISPATCHER.DAT &apos;;&apos;
cd ..\..\..

::Run Cygwin and collect Result
mkdir tcygwin
cd tcygwin
set BPATH=%PATH%
set PATH=C:\cygwin\bin;%PATH%
bash -c &quot;cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ../tests&quot;
cd MathTest\Matrix
python ..\..\VcRunTests.py --metrics
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\CYGWIN.DAT &apos;;&apos;
set PATH=%BPATH%

::Run Examples and collect Result
cd %WORKSPACE%\\build
call release-package.bat
cd ..\release-packages\release\examples
call buildall.bat msvc10
C:\cygwin\bin\find . -name &quot;TESTINSS*&quot; -exec C:\cygwin\bin\cat &apos;{}&apos; &gt;&gt; %VC_RESULT_DIR%\\EXAMPLES.DAT &apos;;&apos;

::Add collected results to cover project
cd &quot;%WORKSPACE%&quot;
set results=VCRUNTESTS LONGCMD CMDVERB OLD_VCAPP SEQ_DISPATCHER EXAMPLES CYGWIN
for %%r in (%results%) do (
%VECTORCAST_DIR%\clicast -lc -e VcTools cover result add &quot;%VC_RESULT_DIR%\%%r.DAT&quot;
)

::Create Manage projects
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --create
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --level Source/Windows --create
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --level Source/Windows/CompilerNode --create
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --level Source/Windows/CompilerNode/SystemTesting --create
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --group Cover --create
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --level Source/Windows/CompilerNode/SystemTesting --add Cover
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --import VcTools.vcp 
%VECTORCAST_DIR%\manage -p &quot;%MANAGE_PROJECT%&quot; --group Cover --add VcTools

::Generate reports
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\generate-results.py&quot; --api 2 &quot;%MANAGE_PROJECT%&quot; 
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --full-status=&quot;VcTools_Windows_full_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=aggregate   --output=&quot;VcTools_Windows_aggregate_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=metrics     --output=&quot;VcTools_Windows_metrics_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --create-report=environment --output=&quot;VcTools_Windows_environment_report.html&quot;
%VECTORCAST_DIR%\manage --project &quot;%MANAGE_PROJECT%&quot; --full-status &gt; &quot;VcTools_Windows_full_report.txt&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\gen-combined-cov.py&quot; &quot;VcTools_Windows_aggregate_report.html&quot;
%VECTORCAST_DIR%\vpython &quot;%WORKSPACE%\vc_scripts\getTotals.py&quot; --api 2 &quot;VcTools_Windows_full_report.txt&quot;
%VECTORCAST_DIR%\vcdash -p &quot;%MANAGE_PROJECT%&quot; --history-dir=&quot;%VC_HISTORY_DIR%&quot; --save-history
start %VECTORCAST_DIR%\vcdash --project &quot;%MANAGE_PROJECT&quot; --history-dir=&quot;%VC_HISTORY_DIR&quot; --run-server --vcdb &quot;%WORKSPACE%\vcshell.db&quot;</winCommand>
      <unixCommand></unixCommand>
    </com.vectorcast.plugins.vectorcastexecution.VectorCASTCommand>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*_report.html, xml_data/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher plugin="vectorcast-coverage@0.10">
      <includes>**/coverage_results_*.xml</includes>
      <useThreshold>false</useThreshold>
      <healthReports>
        <minStatement>0</minStatement>
        <maxStatement>100</maxStatement>
        <minBranch>0</minBranch>
        <maxBranch>70</maxBranch>
        <minBasisPath>0</minBasisPath>
        <maxBasisPath>80</maxBasisPath>
        <minMCDC>0</minMCDC>
        <maxMCDC>80</maxMCDC>
        <minFunction>0</minFunction>
        <maxFunction>80</maxFunction>
        <minFunctionCall>0</minFunctionCall>
        <maxFunctionCall>80</maxFunctionCall>
      </healthReports>
    </com.vectorcast.plugins.vectorcastcoverage.VectorCASTPublisher>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.42">
        <script>import hudson.FilePath
import java.util.regex.Pattern

if(manager.logContains(&quot;.*py did not execute correctly.*&quot;) || manager.logContains(&quot;.*Traceback .most recent call last.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Jenkins Integration Script Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Jenkins Integration Script Failure&quot;)
}
if (manager.logContains(&quot;.*Failed to acquire lock on environment.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Failed to acquire lock on environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Failed to acquire lock on environment&quot;)
}
if (manager.logContains(&quot;.*Environment Creation Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Environment Creation Failed&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Environment Creation Failed&quot;)
}
if (manager.logContains(&quot;.*FLEXlm Error.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;FLEXlm Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;FLEXlm Error&quot;)
}
if (manager.logContains(&quot;.*INCR_BUILD_FAILED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Build Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Build Error&quot;)
}
if (manager.logContains(&quot;.*NOT_LINKED.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Link Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Link Error&quot;)
}
if (manager.logContains(&quot;.*Preprocess Failed.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Preprocess Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Preprocess Error&quot;)
}
if (manager.logContains(&quot;.*Value Line Error - Command Ignored.*&quot;))
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Test Case Import Error&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Test Case Import Error&quot;)
}

if(manager.logContains(&quot;.*Abnormal Termination on Environment.*&quot;)) 
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;Abnormal Termination of at least one Environment&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.addBadge(&quot;warning.gif&quot;, &quot;Abnormal Termination of at least one Environment&quot;)
}
FilePath fp_f = new FilePath(manager.build.getWorkspace(),&apos;VcTools_Windows_full_report.html&apos;)
if ( fp_f.exists())
{
    manager.build.description =  fp_f.readToString()}
else
{
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;General Failure&quot;, false, false, false, &quot;red&quot;)
    manager.buildUnstable()
    manager.build.description = &quot;General Failure,  Full Report Not Present. Please see the console for more information&quot;
    manager.addBadge(&quot;warning.gif&quot;, &quot;General Error&quot;)
}

def buildLog = manager.build.getLog()
Pattern pattern = Pattern.compile(&apos;Coverage: Statement.*?[(](.*?)[%][)]&apos;)
int coverage = 0
buildLog.eachMatch pattern, {
   manager.listener.logger.println(it)
    coverage = Integer.valueOf(it[1])
   }

if ( coverage &lt; 60) {
      manager.buildFailure()
       manager.addBadge(&quot;error.gif&quot;, &quot;Coverage percentage dropped below 60%&quot;)
 }
</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>2</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.57">
      <recipientList>vectorindia@vectorcast.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
        <hudson.plugins.emailext.plugins.trigger.StatusChangedTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.StatusChangedTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>Coverage Windows Job</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>vectorindia@vectorcast.com</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
    <org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper plugin="preSCMbuildstep@0.3">
      <buildSteps>
        <hudson.tasks.BatchFile>
          <command>:: kill vcdash&#xd;
taskkill /IM vcdash.exe /f&#xd;
&#xd;
:: Delete the workspace&#xd;
cd %WORKSPACE%\\..&#xd;
rmdir /q /s %WORKSPACE%</command>
        </hudson.tasks.BatchFile>
      </buildSteps>
      <failOnError>false</failOnError>
    </org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>${ENV, var=&quot;BUILD_NAME&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>